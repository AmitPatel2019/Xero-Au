//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cosmic.DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class XS_XEROEntities : DbContext
    {
        public XS_XEROEntities()
            : base("name=XS_XEROEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ConfigSetting> ConfigSettings { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<FileSQLMaster> FileSQLMasters { get; set; }
        public virtual DbSet<LoginMaster> LoginMasters { get; set; }
        public virtual DbSet<PlanMaster> PlanMasters { get; set; }
        public virtual DbSet<PlatformMaster> PlatformMasters { get; set; }
        public virtual DbSet<QboChartOfAccount> QboChartOfAccounts { get; set; }
        public virtual DbSet<QBODocument> QBODocuments { get; set; }
        public virtual DbSet<QboDocumentLine> QboDocumentLines { get; set; }
        public virtual DbSet<QBOEzzyAccount> QBOEzzyAccounts { get; set; }
        public virtual DbSet<QBOMaster> QBOMasters { get; set; }
        public virtual DbSet<QboTax> QboTaxes { get; set; }
        public virtual DbSet<QboVendor> QboVendors { get; set; }
        public virtual DbSet<ReckonDesktopMaster> ReckonDesktopMasters { get; set; }
        public virtual DbSet<ReckonDocument> ReckonDocuments { get; set; }
        public virtual DbSet<ReckonEzzyAccount> ReckonEzzyAccounts { get; set; }
        public virtual DbSet<ReckonFileUserAccess> ReckonFileUserAccesses { get; set; }
        public virtual DbSet<ReckonVendorDefault> ReckonVendorDefaults { get; set; }
        public virtual DbSet<StripePayment> StripePayments { get; set; }
        public virtual DbSet<SubscriptionMaster> SubscriptionMasters { get; set; }
        public virtual DbSet<XeroChartOfAccount> XeroChartOfAccounts { get; set; }
        public virtual DbSet<XeroDocument> XeroDocuments { get; set; }
        public virtual DbSet<XeroDocumentLine> XeroDocumentLines { get; set; }
        public virtual DbSet<XeroEzzyAccount> XeroEzzyAccounts { get; set; }
        public virtual DbSet<XeroMaster> XeroMasters { get; set; }
        public virtual DbSet<XeroTax> XeroTaxes { get; set; }
        public virtual DbSet<XeroVendor> XeroVendors { get; set; }
        public virtual DbSet<AccountMaster> AccountMasters { get; set; }
    
        public virtual int uspActivateAccount(string userName, string password, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspActivateAccount", userNameParameter, passwordParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminGetReckonDocument_Result> uspAdminGetReckonDocument(Nullable<int> accountID, Nullable<int> reckonFiID, Nullable<int> month, Nullable<int> year, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var reckonFiIDParameter = reckonFiID.HasValue ?
                new ObjectParameter("ReckonFiID", reckonFiID) :
                new ObjectParameter("ReckonFiID", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminGetReckonDocument_Result>("uspAdminGetReckonDocument", accountIDParameter, reckonFiIDParameter, monthParameter, yearParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminGetReckonDocumentByPlatformAndAccount_Result> uspAdminGetReckonDocumentByPlatformAndAccount(Nullable<int> account, Nullable<int> reckonfileid, Nullable<int> month, Nullable<int> year, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountParameter = account.HasValue ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(int));
    
            var reckonfileidParameter = reckonfileid.HasValue ?
                new ObjectParameter("reckonfileid", reckonfileid) :
                new ObjectParameter("reckonfileid", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminGetReckonDocumentByPlatformAndAccount_Result>("uspAdminGetReckonDocumentByPlatformAndAccount", accountParameter, reckonfileidParameter, monthParameter, yearParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminGetStripePayment_Result> uspAdminGetStripePayment(Nullable<int> month, Nullable<int> year, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminGetStripePayment_Result>("uspAdminGetStripePayment", monthParameter, yearParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminpGetAccountMaster_Result> uspAdminpGetAccountMaster(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminpGetAccountMaster_Result>("uspAdminpGetAccountMaster", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminpGetAccountMasterByPlatformAndPlan_Result> uspAdminpGetAccountMasterByPlatformAndPlan(Nullable<int> platform, Nullable<int> plan, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var platformParameter = platform.HasValue ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(int));
    
            var planParameter = plan.HasValue ?
                new ObjectParameter("Plan", plan) :
                new ObjectParameter("Plan", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminpGetAccountMasterByPlatformAndPlan_Result>("uspAdminpGetAccountMasterByPlatformAndPlan", platformParameter, planParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminpGetLoginMasterByAccountID_Result> uspAdminpGetLoginMasterByAccountID(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminpGetLoginMasterByAccountID_Result>("uspAdminpGetLoginMasterByAccountID", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminpGetReckonMasterByAccountID_Result> uspAdminpGetReckonMasterByAccountID(Nullable<int> accountID, Nullable<int> loginID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminpGetReckonMasterByAccountID_Result>("uspAdminpGetReckonMasterByAccountID", accountIDParameter, loginIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminpGetReckonMasterByAccountIDAndPlatform_Result> uspAdminpGetReckonMasterByAccountIDAndPlatform(Nullable<int> accountID, Nullable<int> platformID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminpGetReckonMasterByAccountIDAndPlatform_Result>("uspAdminpGetReckonMasterByAccountIDAndPlatform", accountIDParameter, platformIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspAdminpGetStripePaymentByAccountID_Result> uspAdminpGetStripePaymentByAccountID(Nullable<int> accountID, Nullable<int> planID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdminpGetStripePaymentByAccountID_Result>("uspAdminpGetStripePaymentByAccountID", accountIDParameter, planIDParameter, errNum, errDesc);
        }
    
        public virtual int uspAdminSavePlan(Nullable<int> planID, string planName, string planDescription, Nullable<int> trialDays, Nullable<int> trialPdf, Nullable<int> paidPdf, Nullable<int> ratePerYearGST, Nullable<int> ratePerYearSubTotal, Nullable<int> ratePerYearTotal, Nullable<bool> isPaidPlan, Nullable<bool> isActive, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identityValue)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            var planNameParameter = planName != null ?
                new ObjectParameter("PlanName", planName) :
                new ObjectParameter("PlanName", typeof(string));
    
            var planDescriptionParameter = planDescription != null ?
                new ObjectParameter("PlanDescription", planDescription) :
                new ObjectParameter("PlanDescription", typeof(string));
    
            var trialDaysParameter = trialDays.HasValue ?
                new ObjectParameter("TrialDays", trialDays) :
                new ObjectParameter("TrialDays", typeof(int));
    
            var trialPdfParameter = trialPdf.HasValue ?
                new ObjectParameter("TrialPdf", trialPdf) :
                new ObjectParameter("TrialPdf", typeof(int));
    
            var paidPdfParameter = paidPdf.HasValue ?
                new ObjectParameter("PaidPdf", paidPdf) :
                new ObjectParameter("PaidPdf", typeof(int));
    
            var ratePerYearGSTParameter = ratePerYearGST.HasValue ?
                new ObjectParameter("RatePerYearGST", ratePerYearGST) :
                new ObjectParameter("RatePerYearGST", typeof(int));
    
            var ratePerYearSubTotalParameter = ratePerYearSubTotal.HasValue ?
                new ObjectParameter("RatePerYearSubTotal", ratePerYearSubTotal) :
                new ObjectParameter("RatePerYearSubTotal", typeof(int));
    
            var ratePerYearTotalParameter = ratePerYearTotal.HasValue ?
                new ObjectParameter("RatePerYearTotal", ratePerYearTotal) :
                new ObjectParameter("RatePerYearTotal", typeof(int));
    
            var isPaidPlanParameter = isPaidPlan.HasValue ?
                new ObjectParameter("IsPaidPlan", isPaidPlan) :
                new ObjectParameter("IsPaidPlan", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAdminSavePlan", planIDParameter, planNameParameter, planDescriptionParameter, trialDaysParameter, trialPdfParameter, paidPdfParameter, ratePerYearGSTParameter, ratePerYearSubTotalParameter, ratePerYearTotalParameter, isPaidPlanParameter, isActiveParameter, errNum, errDesc, identityValue);
        }
    
        public virtual int uspApproveQboDocument(Nullable<int> documentID, Nullable<bool> approve, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var approveParameter = approve.HasValue ?
                new ObjectParameter("Approve", approve) :
                new ObjectParameter("Approve", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspApproveQboDocument", documentIDParameter, approveParameter, errNum, errDesc);
        }
    
        public virtual int uspApproveXeroDocument(Nullable<int> documentID, Nullable<bool> approve, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var approveParameter = approve.HasValue ?
                new ObjectParameter("Approve", approve) :
                new ObjectParameter("Approve", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspApproveXeroDocument", documentIDParameter, approveParameter, errNum, errDesc);
        }
    
        public virtual int uspChangePassword(string userName, string existsPassword, string newPassword, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var existsPasswordParameter = existsPassword != null ?
                new ObjectParameter("ExistsPassword", existsPassword) :
                new ObjectParameter("ExistsPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChangePassword", userNameParameter, existsPasswordParameter, newPasswordParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckXeroToken(Nullable<int> accountID, Nullable<int> xeroID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var xeroIDParameter = xeroID.HasValue ?
                new ObjectParameter("XeroID", xeroID) :
                new ObjectParameter("XeroID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckXeroToken", accountIDParameter, xeroIDParameter, errNum, errDesc);
        }
    
        public virtual int uspDeleteQboDocument(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<int> documentID, Nullable<bool> isDeleted, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteQboDocument", accountIDParameter, qboConnectIDParameter, documentIDParameter, isDeletedParameter, errNum, errDesc);
        }
    
        public virtual int uspDeleteXeroDocument(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<int> documentID, Nullable<bool> isDeleted, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteXeroDocument", accountIDParameter, qboConnectIDParameter, documentIDParameter, isDeletedParameter, errNum, errDesc);
        }
    
        public virtual int uspEditQboDocumentLine(Nullable<int> documentID, Nullable<int> documentLineID, string scanDescription, Nullable<decimal> scanGST, Nullable<decimal> scanUnit_Price, Nullable<decimal> scan_Quantity, Nullable<decimal> scan_Total, Nullable<decimal> scanInvoiceTotal, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentLineIDParameter = documentLineID.HasValue ?
                new ObjectParameter("DocumentLineID", documentLineID) :
                new ObjectParameter("DocumentLineID", typeof(int));
    
            var scanDescriptionParameter = scanDescription != null ?
                new ObjectParameter("ScanDescription", scanDescription) :
                new ObjectParameter("ScanDescription", typeof(string));
    
            var scanGSTParameter = scanGST.HasValue ?
                new ObjectParameter("ScanGST", scanGST) :
                new ObjectParameter("ScanGST", typeof(decimal));
    
            var scanUnit_PriceParameter = scanUnit_Price.HasValue ?
                new ObjectParameter("ScanUnit_Price", scanUnit_Price) :
                new ObjectParameter("ScanUnit_Price", typeof(decimal));
    
            var scan_QuantityParameter = scan_Quantity.HasValue ?
                new ObjectParameter("Scan_Quantity", scan_Quantity) :
                new ObjectParameter("Scan_Quantity", typeof(decimal));
    
            var scan_TotalParameter = scan_Total.HasValue ?
                new ObjectParameter("Scan_Total", scan_Total) :
                new ObjectParameter("Scan_Total", typeof(decimal));
    
            var scanInvoiceTotalParameter = scanInvoiceTotal.HasValue ?
                new ObjectParameter("ScanInvoiceTotal", scanInvoiceTotal) :
                new ObjectParameter("ScanInvoiceTotal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEditQboDocumentLine", documentIDParameter, documentLineIDParameter, scanDescriptionParameter, scanGSTParameter, scanUnit_PriceParameter, scan_QuantityParameter, scan_TotalParameter, scanInvoiceTotalParameter, errNum, errDesc);
        }
    
        public virtual int uspEditXeroDocumentLine(Nullable<int> documentID, Nullable<int> documentLineID, string scanDescription, Nullable<decimal> scanGST, Nullable<decimal> scanUnit_Price, Nullable<decimal> scan_Quantity, Nullable<decimal> scan_Total, Nullable<decimal> scanInvoiceTotal, string scanPurchaseOrder, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentLineIDParameter = documentLineID.HasValue ?
                new ObjectParameter("DocumentLineID", documentLineID) :
                new ObjectParameter("DocumentLineID", typeof(int));
    
            var scanDescriptionParameter = scanDescription != null ?
                new ObjectParameter("ScanDescription", scanDescription) :
                new ObjectParameter("ScanDescription", typeof(string));
    
            var scanGSTParameter = scanGST.HasValue ?
                new ObjectParameter("ScanGST", scanGST) :
                new ObjectParameter("ScanGST", typeof(decimal));
    
            var scanUnit_PriceParameter = scanUnit_Price.HasValue ?
                new ObjectParameter("ScanUnit_Price", scanUnit_Price) :
                new ObjectParameter("ScanUnit_Price", typeof(decimal));
    
            var scan_QuantityParameter = scan_Quantity.HasValue ?
                new ObjectParameter("Scan_Quantity", scan_Quantity) :
                new ObjectParameter("Scan_Quantity", typeof(decimal));
    
            var scan_TotalParameter = scan_Total.HasValue ?
                new ObjectParameter("Scan_Total", scan_Total) :
                new ObjectParameter("Scan_Total", typeof(decimal));
    
            var scanInvoiceTotalParameter = scanInvoiceTotal.HasValue ?
                new ObjectParameter("ScanInvoiceTotal", scanInvoiceTotal) :
                new ObjectParameter("ScanInvoiceTotal", typeof(decimal));
    
            var scanPurchaseOrderParameter = scanPurchaseOrder != null ?
                new ObjectParameter("ScanPurchaseOrder", scanPurchaseOrder) :
                new ObjectParameter("ScanPurchaseOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEditXeroDocumentLine", documentIDParameter, documentLineIDParameter, scanDescriptionParameter, scanGSTParameter, scanUnit_PriceParameter, scan_QuantityParameter, scan_TotalParameter, scanInvoiceTotalParameter, scanPurchaseOrderParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetAccount_Result> uspGetAccount(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAccount_Result>("uspGetAccount", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetAccountByAccountID_Result> uspGetAccountByAccountID(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAccountByAccountID_Result>("uspGetAccountByAccountID", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetByte_Result> uspGetByte()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetByte_Result>("uspGetByte");
        }
    
        public virtual ObjectResult<uspGetEzzyLogin_Result> uspGetEzzyLogin(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEzzyLogin_Result>("uspGetEzzyLogin", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetFileSQLMasters_Result> uspGetFileSQLMasters(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetFileSQLMasters_Result>("uspGetFileSQLMasters", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetFileSQLMastersByID_Result> uspGetFileSQLMastersByID(Nullable<int> uid, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetFileSQLMastersByID_Result>("uspGetFileSQLMastersByID", uidParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetLoginByUserName_Result> uspGetLoginByUserName(string userName, Nullable<int> platformID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLoginByUserName_Result>("uspGetLoginByUserName", userNameParameter, platformIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetLoginMaster_Result> uspGetLoginMaster(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLoginMaster_Result>("uspGetLoginMaster", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetLoginMasterByID_Result> uspGetLoginMasterByID(Nullable<int> uid, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLoginMasterByID_Result>("uspGetLoginMasterByID", uidParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetLoginMasterByToken_Result> uspGetLoginMasterByToken(string token, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLoginMasterByToken_Result>("uspGetLoginMasterByToken", tokenParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetLoginMasterByUserName_Result> uspGetLoginMasterByUserName(string userName, Nullable<int> platformID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLoginMasterByUserName_Result>("uspGetLoginMasterByUserName", userNameParameter, platformIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetMaxEzzyAccountID(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetMaxEzzyAccountID", errNum, errDesc);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetMaxEzzyQboAccountID(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetMaxEzzyQboAccountID", errNum, errDesc);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetMaxEzzyXeroAccountID(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetMaxEzzyXeroAccountID", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetPaymentByAccountID_Result> uspGetPaymentByAccountID(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPaymentByAccountID_Result>("uspGetPaymentByAccountID", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetPlan_Result> uspGetPlan(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPlan_Result>("uspGetPlan", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetPlanByID_Result> uspGetPlanByID(Nullable<int> planID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPlanByID_Result>("uspGetPlanByID", planIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetPlatformMaster_Result> uspGetPlatformMaster(ObjectParameter errNum, ObjectParameter errDesc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPlatformMaster_Result>("uspGetPlatformMaster", errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetPlatformMasterByID_Result> uspGetPlatformMasterByID(Nullable<int> uid, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPlatformMasterByID_Result>("uspGetPlatformMasterByID", uidParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboChartOfAccount_Result> uspGetQboChartOfAccount(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboChartOfAccount_Result>("uspGetQboChartOfAccount", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboDocumentById_Result> uspGetQboDocumentById(Nullable<int> qboDocumentID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var qboDocumentIDParameter = qboDocumentID.HasValue ?
                new ObjectParameter("qboDocumentID", qboDocumentID) :
                new ObjectParameter("qboDocumentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboDocumentById_Result>("uspGetQboDocumentById", qboDocumentIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboDocumentHistory_Result> uspGetQboDocumentHistory(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<int> month, Nullable<int> year, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboDocumentHistory_Result>("uspGetQboDocumentHistory", accountIDParameter, qboConnectIDParameter, monthParameter, yearParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboDocumentLineToApprove_Result> uspGetQboDocumentLineToApprove(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<bool> approved, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboDocumentLineToApprove_Result>("uspGetQboDocumentLineToApprove", accountIDParameter, qboConnectIDParameter, approvedParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboDocumentToApprove_Result> uspGetQboDocumentToApprove(Nullable<int> accountID, Nullable<int> qboConnectID, string aspSessionID, Nullable<bool> approved, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var aspSessionIDParameter = aspSessionID != null ?
                new ObjectParameter("AspSessionID", aspSessionID) :
                new ObjectParameter("AspSessionID", typeof(string));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboDocumentToApprove_Result>("uspGetQboDocumentToApprove", accountIDParameter, qboConnectIDParameter, aspSessionIDParameter, approvedParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboDocumentToBill_Result> uspGetQboDocumentToBill(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<bool> approved, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboDocumentToBill_Result>("uspGetQboDocumentToBill", accountIDParameter, qboConnectIDParameter, approvedParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboDocumentToProcess_Result> uspGetQboDocumentToProcess(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboDocumentToProcess_Result>("uspGetQboDocumentToProcess", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboDocumentToRead_Result> uspGetQboDocumentToRead(Nullable<int> accountID, Nullable<int> qboConnectID, string aspSessionID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var aspSessionIDParameter = aspSessionID != null ?
                new ObjectParameter("AspSessionID", aspSessionID) :
                new ObjectParameter("AspSessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboDocumentToRead_Result>("uspGetQboDocumentToRead", accountIDParameter, qboConnectIDParameter, aspSessionIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQBOMasterByAccountAndConnectID_Result> uspGetQBOMasterByAccountAndConnectID(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQBOMasterByAccountAndConnectID_Result>("uspGetQBOMasterByAccountAndConnectID", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQBOMasterByAccountID_Result> uspGetQBOMasterByAccountID(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQBOMasterByAccountID_Result>("uspGetQBOMasterByAccountID", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQBOScanningLogin_Result> uspGetQBOScanningLogin(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQBOScanningLogin_Result>("uspGetQBOScanningLogin", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboTax_Result> uspGetQboTax(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboTax_Result>("uspGetQboTax", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetQboVendor_Result> uspGetQboVendor(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQboVendor_Result>("uspGetQboVendor", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetRCScanningLogin_Result> uspGetRCScanningLogin(Nullable<int> accountID, Nullable<int> reckonFileID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRCScanningLogin_Result>("uspGetRCScanningLogin", accountIDParameter, reckonFileIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetReckonDesktopByAccountID_Result> uspGetReckonDesktopByAccountID(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReckonDesktopByAccountID_Result>("uspGetReckonDesktopByAccountID", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetReckonDocument_Result> uspGetReckonDocument(Nullable<int> accountID, Nullable<int> reckonFileID, Nullable<int> month, Nullable<int> year, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReckonDocument_Result>("uspGetReckonDocument", accountIDParameter, reckonFileIDParameter, monthParameter, yearParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetReckonFileByAccountID_Result> uspGetReckonFileByAccountID(Nullable<int> accountID, Nullable<int> loginID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReckonFileByAccountID_Result>("uspGetReckonFileByAccountID", accountIDParameter, loginIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetReckonVendDefault_Result> uspGetReckonVendDefault(Nullable<int> accountID, Nullable<int> reckonFileID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReckonVendDefault_Result>("uspGetReckonVendDefault", accountIDParameter, reckonFileIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetReconDesktopMasterByID_Result> uspGetReconDesktopMasterByID(Nullable<int> uid, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReconDesktopMasterByID_Result>("uspGetReconDesktopMasterByID", uidParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetSubscriptionByAccountID_Result> uspGetSubscriptionByAccountID(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSubscriptionByAccountID_Result>("uspGetSubscriptionByAccountID", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetSubUser_Result> uspGetSubUser(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSubUser_Result>("uspGetSubUser", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetUsedPaidPDF(Nullable<int> accountID, Nullable<int> platformID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetUsedPaidPDF", accountIDParameter, platformIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetUsedTrialPDF(Nullable<int> accountID, Nullable<int> platformID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetUsedTrialPDF", accountIDParameter, platformIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroChartOfAccount_Result> uspGetXeroChartOfAccount(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroChartOfAccount_Result>("uspGetXeroChartOfAccount", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentById_Result> uspGetXeroDocumentById(Nullable<int> qboDocumentID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var qboDocumentIDParameter = qboDocumentID.HasValue ?
                new ObjectParameter("qboDocumentID", qboDocumentID) :
                new ObjectParameter("qboDocumentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentById_Result>("uspGetXeroDocumentById", qboDocumentIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentHistory_Result> uspGetXeroDocumentHistory(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<int> month, Nullable<int> year, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentHistory_Result>("uspGetXeroDocumentHistory", accountIDParameter, qboConnectIDParameter, monthParameter, yearParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentHistoryByDate_Result> uspGetXeroDocumentHistoryByDate(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentHistoryByDate_Result>("uspGetXeroDocumentHistoryByDate", accountIDParameter, qboConnectIDParameter, fromdateParameter, todateParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentToApprove_Result> uspGetXeroDocumentToApprove(Nullable<int> accountID, Nullable<int> qboConnectID, string aspSessionID, Nullable<bool> approved, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var aspSessionIDParameter = aspSessionID != null ?
                new ObjectParameter("AspSessionID", aspSessionID) :
                new ObjectParameter("AspSessionID", typeof(string));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentToApprove_Result>("uspGetXeroDocumentToApprove", accountIDParameter, qboConnectIDParameter, aspSessionIDParameter, approvedParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentToAuth_Result> uspGetXeroDocumentToAuth(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentToAuth_Result>("uspGetXeroDocumentToAuth", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentToBill_Result> uspGetXeroDocumentToBill(Nullable<int> accountID, Nullable<int> qboConnectID, Nullable<bool> approved, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentToBill_Result>("uspGetXeroDocumentToBill", accountIDParameter, qboConnectIDParameter, approvedParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentToProcess_Result> uspGetXeroDocumentToProcess(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentToProcess_Result>("uspGetXeroDocumentToProcess", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroDocumentToRead_Result> uspGetXeroDocumentToRead(Nullable<int> accountID, Nullable<int> qboConnectID, string aspSessionID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var aspSessionIDParameter = aspSessionID != null ?
                new ObjectParameter("AspSessionID", aspSessionID) :
                new ObjectParameter("AspSessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroDocumentToRead_Result>("uspGetXeroDocumentToRead", accountIDParameter, qboConnectIDParameter, aspSessionIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroMasterByAccountAndConnectID_Result> uspGetXeroMasterByAccountAndConnectID(Nullable<int> accountID, Nullable<int> xeroConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var xeroConnectIDParameter = xeroConnectID.HasValue ?
                new ObjectParameter("XeroConnectID", xeroConnectID) :
                new ObjectParameter("XeroConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroMasterByAccountAndConnectID_Result>("uspGetXeroMasterByAccountAndConnectID", accountIDParameter, xeroConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroMasterByAccountID_Result> uspGetXeroMasterByAccountID(Nullable<int> accountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroMasterByAccountID_Result>("uspGetXeroMasterByAccountID", accountIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroScanningLogin_Result> uspGetXeroScanningLogin(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroScanningLogin_Result>("uspGetXeroScanningLogin", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroTax_Result> uspGetXeroTax(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroTax_Result>("uspGetXeroTax", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspGetXeroVendor_Result> uspGetXeroVendor(Nullable<int> accountID, Nullable<int> qboConnectID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetXeroVendor_Result>("uspGetXeroVendor", accountIDParameter, qboConnectIDParameter, errNum, errDesc);
        }
    
        public virtual int uspInsertQboDocument(Nullable<int> documentID, Nullable<int> accountID, Nullable<int> qboConnectID, string qboInvoiceID, string qboVendorID, string qboVendorName, Nullable<System.DateTime> qboInvoiceDate, Nullable<int> scanInvoiceID, string scanFile_Name, string scanBlob_Url, string scanABNNumber, string scanRefNumber, string scanDocType, Nullable<decimal> scanSubTotal, Nullable<decimal> scanChargeTotal, Nullable<decimal> scanDocumentTotal, string scanTag, Nullable<System.DateTime> scanInvoiceDate, string scanPurchaseOrder, string scanVendorName, Nullable<decimal> scanInvoiceTotal, Nullable<decimal> scanTaxTotal, string scanDocClassification, string scanServiceStatus, string scanServiceMessage, string qBOError, string aspSessionID, Nullable<bool> approved, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboInvoiceIDParameter = qboInvoiceID != null ?
                new ObjectParameter("QboInvoiceID", qboInvoiceID) :
                new ObjectParameter("QboInvoiceID", typeof(string));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var qboVendorNameParameter = qboVendorName != null ?
                new ObjectParameter("QboVendorName", qboVendorName) :
                new ObjectParameter("QboVendorName", typeof(string));
    
            var qboInvoiceDateParameter = qboInvoiceDate.HasValue ?
                new ObjectParameter("QboInvoiceDate", qboInvoiceDate) :
                new ObjectParameter("QboInvoiceDate", typeof(System.DateTime));
    
            var scanInvoiceIDParameter = scanInvoiceID.HasValue ?
                new ObjectParameter("ScanInvoiceID", scanInvoiceID) :
                new ObjectParameter("ScanInvoiceID", typeof(int));
    
            var scanFile_NameParameter = scanFile_Name != null ?
                new ObjectParameter("ScanFile_Name", scanFile_Name) :
                new ObjectParameter("ScanFile_Name", typeof(string));
    
            var scanBlob_UrlParameter = scanBlob_Url != null ?
                new ObjectParameter("ScanBlob_Url", scanBlob_Url) :
                new ObjectParameter("ScanBlob_Url", typeof(string));
    
            var scanABNNumberParameter = scanABNNumber != null ?
                new ObjectParameter("ScanABNNumber", scanABNNumber) :
                new ObjectParameter("ScanABNNumber", typeof(string));
    
            var scanRefNumberParameter = scanRefNumber != null ?
                new ObjectParameter("ScanRefNumber", scanRefNumber) :
                new ObjectParameter("ScanRefNumber", typeof(string));
    
            var scanDocTypeParameter = scanDocType != null ?
                new ObjectParameter("ScanDocType", scanDocType) :
                new ObjectParameter("ScanDocType", typeof(string));
    
            var scanSubTotalParameter = scanSubTotal.HasValue ?
                new ObjectParameter("ScanSubTotal", scanSubTotal) :
                new ObjectParameter("ScanSubTotal", typeof(decimal));
    
            var scanChargeTotalParameter = scanChargeTotal.HasValue ?
                new ObjectParameter("ScanChargeTotal", scanChargeTotal) :
                new ObjectParameter("ScanChargeTotal", typeof(decimal));
    
            var scanDocumentTotalParameter = scanDocumentTotal.HasValue ?
                new ObjectParameter("ScanDocumentTotal", scanDocumentTotal) :
                new ObjectParameter("ScanDocumentTotal", typeof(decimal));
    
            var scanTagParameter = scanTag != null ?
                new ObjectParameter("ScanTag", scanTag) :
                new ObjectParameter("ScanTag", typeof(string));
    
            var scanInvoiceDateParameter = scanInvoiceDate.HasValue ?
                new ObjectParameter("ScanInvoiceDate", scanInvoiceDate) :
                new ObjectParameter("ScanInvoiceDate", typeof(System.DateTime));
    
            var scanPurchaseOrderParameter = scanPurchaseOrder != null ?
                new ObjectParameter("ScanPurchaseOrder", scanPurchaseOrder) :
                new ObjectParameter("ScanPurchaseOrder", typeof(string));
    
            var scanVendorNameParameter = scanVendorName != null ?
                new ObjectParameter("ScanVendorName", scanVendorName) :
                new ObjectParameter("ScanVendorName", typeof(string));
    
            var scanInvoiceTotalParameter = scanInvoiceTotal.HasValue ?
                new ObjectParameter("ScanInvoiceTotal", scanInvoiceTotal) :
                new ObjectParameter("ScanInvoiceTotal", typeof(decimal));
    
            var scanTaxTotalParameter = scanTaxTotal.HasValue ?
                new ObjectParameter("ScanTaxTotal", scanTaxTotal) :
                new ObjectParameter("ScanTaxTotal", typeof(decimal));
    
            var scanDocClassificationParameter = scanDocClassification != null ?
                new ObjectParameter("ScanDocClassification", scanDocClassification) :
                new ObjectParameter("ScanDocClassification", typeof(string));
    
            var scanServiceStatusParameter = scanServiceStatus != null ?
                new ObjectParameter("ScanServiceStatus", scanServiceStatus) :
                new ObjectParameter("ScanServiceStatus", typeof(string));
    
            var scanServiceMessageParameter = scanServiceMessage != null ?
                new ObjectParameter("ScanServiceMessage", scanServiceMessage) :
                new ObjectParameter("ScanServiceMessage", typeof(string));
    
            var qBOErrorParameter = qBOError != null ?
                new ObjectParameter("QBOError", qBOError) :
                new ObjectParameter("QBOError", typeof(string));
    
            var aspSessionIDParameter = aspSessionID != null ?
                new ObjectParameter("AspSessionID", aspSessionID) :
                new ObjectParameter("AspSessionID", typeof(string));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertQboDocument", documentIDParameter, accountIDParameter, qboConnectIDParameter, qboInvoiceIDParameter, qboVendorIDParameter, qboVendorNameParameter, qboInvoiceDateParameter, scanInvoiceIDParameter, scanFile_NameParameter, scanBlob_UrlParameter, scanABNNumberParameter, scanRefNumberParameter, scanDocTypeParameter, scanSubTotalParameter, scanChargeTotalParameter, scanDocumentTotalParameter, scanTagParameter, scanInvoiceDateParameter, scanPurchaseOrderParameter, scanVendorNameParameter, scanInvoiceTotalParameter, scanTaxTotalParameter, scanDocClassificationParameter, scanServiceStatusParameter, scanServiceMessageParameter, qBOErrorParameter, aspSessionIDParameter, approvedParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspInsertQboDocumentLine(Nullable<int> documentID, string qboAccountID, string qboAccountName, string qboClassID, string qboClassName, string qboJobID, string qboJobName, string scanDescription, string scanArticle_Code, string scanGL_Code, Nullable<decimal> scanGST, string scanTax_Code, string scanTracking, string scanUnit_Measure, Nullable<decimal> scanUnit_Price, Nullable<decimal> scan_Quantity, Nullable<decimal> scan_Total, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            var qboAccountNameParameter = qboAccountName != null ?
                new ObjectParameter("QboAccountName", qboAccountName) :
                new ObjectParameter("QboAccountName", typeof(string));
    
            var qboClassIDParameter = qboClassID != null ?
                new ObjectParameter("QboClassID", qboClassID) :
                new ObjectParameter("QboClassID", typeof(string));
    
            var qboClassNameParameter = qboClassName != null ?
                new ObjectParameter("QboClassName", qboClassName) :
                new ObjectParameter("QboClassName", typeof(string));
    
            var qboJobIDParameter = qboJobID != null ?
                new ObjectParameter("QboJobID", qboJobID) :
                new ObjectParameter("QboJobID", typeof(string));
    
            var qboJobNameParameter = qboJobName != null ?
                new ObjectParameter("QboJobName", qboJobName) :
                new ObjectParameter("QboJobName", typeof(string));
    
            var scanDescriptionParameter = scanDescription != null ?
                new ObjectParameter("ScanDescription", scanDescription) :
                new ObjectParameter("ScanDescription", typeof(string));
    
            var scanArticle_CodeParameter = scanArticle_Code != null ?
                new ObjectParameter("ScanArticle_Code", scanArticle_Code) :
                new ObjectParameter("ScanArticle_Code", typeof(string));
    
            var scanGL_CodeParameter = scanGL_Code != null ?
                new ObjectParameter("ScanGL_Code", scanGL_Code) :
                new ObjectParameter("ScanGL_Code", typeof(string));
    
            var scanGSTParameter = scanGST.HasValue ?
                new ObjectParameter("ScanGST", scanGST) :
                new ObjectParameter("ScanGST", typeof(decimal));
    
            var scanTax_CodeParameter = scanTax_Code != null ?
                new ObjectParameter("ScanTax_Code", scanTax_Code) :
                new ObjectParameter("ScanTax_Code", typeof(string));
    
            var scanTrackingParameter = scanTracking != null ?
                new ObjectParameter("ScanTracking", scanTracking) :
                new ObjectParameter("ScanTracking", typeof(string));
    
            var scanUnit_MeasureParameter = scanUnit_Measure != null ?
                new ObjectParameter("ScanUnit_Measure", scanUnit_Measure) :
                new ObjectParameter("ScanUnit_Measure", typeof(string));
    
            var scanUnit_PriceParameter = scanUnit_Price.HasValue ?
                new ObjectParameter("ScanUnit_Price", scanUnit_Price) :
                new ObjectParameter("ScanUnit_Price", typeof(decimal));
    
            var scan_QuantityParameter = scan_Quantity.HasValue ?
                new ObjectParameter("Scan_Quantity", scan_Quantity) :
                new ObjectParameter("Scan_Quantity", typeof(decimal));
    
            var scan_TotalParameter = scan_Total.HasValue ?
                new ObjectParameter("Scan_Total", scan_Total) :
                new ObjectParameter("Scan_Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertQboDocumentLine", documentIDParameter, qboAccountIDParameter, qboAccountNameParameter, qboClassIDParameter, qboClassNameParameter, qboJobIDParameter, qboJobNameParameter, scanDescriptionParameter, scanArticle_CodeParameter, scanGL_CodeParameter, scanGSTParameter, scanTax_CodeParameter, scanTrackingParameter, scanUnit_MeasureParameter, scanUnit_PriceParameter, scan_QuantityParameter, scan_TotalParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspInsertXeroDocument(Nullable<int> documentID, Nullable<int> accountID, Nullable<int> qboConnectID, string qboInvoiceID, string qboVendorID, string qboVendorName, Nullable<System.DateTime> qboInvoiceDate, Nullable<int> scanInvoiceID, string scanFile_Name, string scanBlob_Url, string scanABNNumber, string scanRefNumber, string scanDocType, Nullable<decimal> scanSubTotal, Nullable<decimal> scanChargeTotal, Nullable<decimal> scanDocumentTotal, string scanTag, Nullable<System.DateTime> scanInvoiceDate, string scanPurchaseOrder, string scanVendorName, Nullable<decimal> scanInvoiceTotal, Nullable<decimal> scanTaxTotal, string scanDocClassification, string scanServiceStatus, string scanServiceMessage, string qBOError, string aspSessionID, Nullable<bool> approved, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboInvoiceIDParameter = qboInvoiceID != null ?
                new ObjectParameter("QboInvoiceID", qboInvoiceID) :
                new ObjectParameter("QboInvoiceID", typeof(string));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var qboVendorNameParameter = qboVendorName != null ?
                new ObjectParameter("QboVendorName", qboVendorName) :
                new ObjectParameter("QboVendorName", typeof(string));
    
            var qboInvoiceDateParameter = qboInvoiceDate.HasValue ?
                new ObjectParameter("QboInvoiceDate", qboInvoiceDate) :
                new ObjectParameter("QboInvoiceDate", typeof(System.DateTime));
    
            var scanInvoiceIDParameter = scanInvoiceID.HasValue ?
                new ObjectParameter("ScanInvoiceID", scanInvoiceID) :
                new ObjectParameter("ScanInvoiceID", typeof(int));
    
            var scanFile_NameParameter = scanFile_Name != null ?
                new ObjectParameter("ScanFile_Name", scanFile_Name) :
                new ObjectParameter("ScanFile_Name", typeof(string));
    
            var scanBlob_UrlParameter = scanBlob_Url != null ?
                new ObjectParameter("ScanBlob_Url", scanBlob_Url) :
                new ObjectParameter("ScanBlob_Url", typeof(string));
    
            var scanABNNumberParameter = scanABNNumber != null ?
                new ObjectParameter("ScanABNNumber", scanABNNumber) :
                new ObjectParameter("ScanABNNumber", typeof(string));
    
            var scanRefNumberParameter = scanRefNumber != null ?
                new ObjectParameter("ScanRefNumber", scanRefNumber) :
                new ObjectParameter("ScanRefNumber", typeof(string));
    
            var scanDocTypeParameter = scanDocType != null ?
                new ObjectParameter("ScanDocType", scanDocType) :
                new ObjectParameter("ScanDocType", typeof(string));
    
            var scanSubTotalParameter = scanSubTotal.HasValue ?
                new ObjectParameter("ScanSubTotal", scanSubTotal) :
                new ObjectParameter("ScanSubTotal", typeof(decimal));
    
            var scanChargeTotalParameter = scanChargeTotal.HasValue ?
                new ObjectParameter("ScanChargeTotal", scanChargeTotal) :
                new ObjectParameter("ScanChargeTotal", typeof(decimal));
    
            var scanDocumentTotalParameter = scanDocumentTotal.HasValue ?
                new ObjectParameter("ScanDocumentTotal", scanDocumentTotal) :
                new ObjectParameter("ScanDocumentTotal", typeof(decimal));
    
            var scanTagParameter = scanTag != null ?
                new ObjectParameter("ScanTag", scanTag) :
                new ObjectParameter("ScanTag", typeof(string));
    
            var scanInvoiceDateParameter = scanInvoiceDate.HasValue ?
                new ObjectParameter("ScanInvoiceDate", scanInvoiceDate) :
                new ObjectParameter("ScanInvoiceDate", typeof(System.DateTime));
    
            var scanPurchaseOrderParameter = scanPurchaseOrder != null ?
                new ObjectParameter("ScanPurchaseOrder", scanPurchaseOrder) :
                new ObjectParameter("ScanPurchaseOrder", typeof(string));
    
            var scanVendorNameParameter = scanVendorName != null ?
                new ObjectParameter("ScanVendorName", scanVendorName) :
                new ObjectParameter("ScanVendorName", typeof(string));
    
            var scanInvoiceTotalParameter = scanInvoiceTotal.HasValue ?
                new ObjectParameter("ScanInvoiceTotal", scanInvoiceTotal) :
                new ObjectParameter("ScanInvoiceTotal", typeof(decimal));
    
            var scanTaxTotalParameter = scanTaxTotal.HasValue ?
                new ObjectParameter("ScanTaxTotal", scanTaxTotal) :
                new ObjectParameter("ScanTaxTotal", typeof(decimal));
    
            var scanDocClassificationParameter = scanDocClassification != null ?
                new ObjectParameter("ScanDocClassification", scanDocClassification) :
                new ObjectParameter("ScanDocClassification", typeof(string));
    
            var scanServiceStatusParameter = scanServiceStatus != null ?
                new ObjectParameter("ScanServiceStatus", scanServiceStatus) :
                new ObjectParameter("ScanServiceStatus", typeof(string));
    
            var scanServiceMessageParameter = scanServiceMessage != null ?
                new ObjectParameter("ScanServiceMessage", scanServiceMessage) :
                new ObjectParameter("ScanServiceMessage", typeof(string));
    
            var qBOErrorParameter = qBOError != null ?
                new ObjectParameter("QBOError", qBOError) :
                new ObjectParameter("QBOError", typeof(string));
    
            var aspSessionIDParameter = aspSessionID != null ?
                new ObjectParameter("AspSessionID", aspSessionID) :
                new ObjectParameter("AspSessionID", typeof(string));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertXeroDocument", documentIDParameter, accountIDParameter, qboConnectIDParameter, qboInvoiceIDParameter, qboVendorIDParameter, qboVendorNameParameter, qboInvoiceDateParameter, scanInvoiceIDParameter, scanFile_NameParameter, scanBlob_UrlParameter, scanABNNumberParameter, scanRefNumberParameter, scanDocTypeParameter, scanSubTotalParameter, scanChargeTotalParameter, scanDocumentTotalParameter, scanTagParameter, scanInvoiceDateParameter, scanPurchaseOrderParameter, scanVendorNameParameter, scanInvoiceTotalParameter, scanTaxTotalParameter, scanDocClassificationParameter, scanServiceStatusParameter, scanServiceMessageParameter, qBOErrorParameter, aspSessionIDParameter, approvedParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspInsertXeroDocumentLine(Nullable<int> documentID, string qboAccountID, string qboAccountName, string qboClassID, string qboClassName, string qboJobID, string qboJobName, string scanDescription, string scanArticle_Code, string scanGL_Code, Nullable<decimal> scanGST, string scanTax_Code, string scanTracking, string scanUnit_Measure, Nullable<decimal> scanUnit_Price, Nullable<decimal> scan_Quantity, Nullable<decimal> scan_Total, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            var qboAccountNameParameter = qboAccountName != null ?
                new ObjectParameter("QboAccountName", qboAccountName) :
                new ObjectParameter("QboAccountName", typeof(string));
    
            var qboClassIDParameter = qboClassID != null ?
                new ObjectParameter("QboClassID", qboClassID) :
                new ObjectParameter("QboClassID", typeof(string));
    
            var qboClassNameParameter = qboClassName != null ?
                new ObjectParameter("QboClassName", qboClassName) :
                new ObjectParameter("QboClassName", typeof(string));
    
            var qboJobIDParameter = qboJobID != null ?
                new ObjectParameter("QboJobID", qboJobID) :
                new ObjectParameter("QboJobID", typeof(string));
    
            var qboJobNameParameter = qboJobName != null ?
                new ObjectParameter("QboJobName", qboJobName) :
                new ObjectParameter("QboJobName", typeof(string));
    
            var scanDescriptionParameter = scanDescription != null ?
                new ObjectParameter("ScanDescription", scanDescription) :
                new ObjectParameter("ScanDescription", typeof(string));
    
            var scanArticle_CodeParameter = scanArticle_Code != null ?
                new ObjectParameter("ScanArticle_Code", scanArticle_Code) :
                new ObjectParameter("ScanArticle_Code", typeof(string));
    
            var scanGL_CodeParameter = scanGL_Code != null ?
                new ObjectParameter("ScanGL_Code", scanGL_Code) :
                new ObjectParameter("ScanGL_Code", typeof(string));
    
            var scanGSTParameter = scanGST.HasValue ?
                new ObjectParameter("ScanGST", scanGST) :
                new ObjectParameter("ScanGST", typeof(decimal));
    
            var scanTax_CodeParameter = scanTax_Code != null ?
                new ObjectParameter("ScanTax_Code", scanTax_Code) :
                new ObjectParameter("ScanTax_Code", typeof(string));
    
            var scanTrackingParameter = scanTracking != null ?
                new ObjectParameter("ScanTracking", scanTracking) :
                new ObjectParameter("ScanTracking", typeof(string));
    
            var scanUnit_MeasureParameter = scanUnit_Measure != null ?
                new ObjectParameter("ScanUnit_Measure", scanUnit_Measure) :
                new ObjectParameter("ScanUnit_Measure", typeof(string));
    
            var scanUnit_PriceParameter = scanUnit_Price.HasValue ?
                new ObjectParameter("ScanUnit_Price", scanUnit_Price) :
                new ObjectParameter("ScanUnit_Price", typeof(decimal));
    
            var scan_QuantityParameter = scan_Quantity.HasValue ?
                new ObjectParameter("Scan_Quantity", scan_Quantity) :
                new ObjectParameter("Scan_Quantity", typeof(decimal));
    
            var scan_TotalParameter = scan_Total.HasValue ?
                new ObjectParameter("Scan_Total", scan_Total) :
                new ObjectParameter("Scan_Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertXeroDocumentLine", documentIDParameter, qboAccountIDParameter, qboAccountNameParameter, qboClassIDParameter, qboClassNameParameter, qboJobIDParameter, qboJobNameParameter, scanDescriptionParameter, scanArticle_CodeParameter, scanGL_CodeParameter, scanGSTParameter, scanTax_CodeParameter, scanTrackingParameter, scanUnit_MeasureParameter, scanUnit_PriceParameter, scan_QuantityParameter, scan_TotalParameter, errNum, errDesc, identity);
        }
    
        public virtual ObjectResult<Nullable<bool>> uspIsEzUploadRequired(Nullable<int> loginID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("uspIsEzUploadRequired", loginIDParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveAccount(Nullable<int> platformID, string userName, string countryOfOrigin, string phone, string add1, string add2, string add3, string city, string state, string zip, string country, string email, string password, string activationCode, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var countryOfOriginParameter = countryOfOrigin != null ?
                new ObjectParameter("CountryOfOrigin", countryOfOrigin) :
                new ObjectParameter("CountryOfOrigin", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var add1Parameter = add1 != null ?
                new ObjectParameter("Add1", add1) :
                new ObjectParameter("Add1", typeof(string));
    
            var add2Parameter = add2 != null ?
                new ObjectParameter("Add2", add2) :
                new ObjectParameter("Add2", typeof(string));
    
            var add3Parameter = add3 != null ?
                new ObjectParameter("Add3", add3) :
                new ObjectParameter("Add3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var activationCodeParameter = activationCode != null ?
                new ObjectParameter("ActivationCode", activationCode) :
                new ObjectParameter("ActivationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveAccount", platformIDParameter, userNameParameter, countryOfOriginParameter, phoneParameter, add1Parameter, add2Parameter, add3Parameter, cityParameter, stateParameter, zipParameter, countryParameter, emailParameter, passwordParameter, activationCodeParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveErrorLog(Nullable<int> accountID, Nullable<int> platformID, Nullable<int> loginID, Nullable<int> reckonFileID, Nullable<int> qboConnectID, string controller, string method, string errorMessage, string errorStackTrace, Nullable<System.DateTime> errorLogDate, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var errorStackTraceParameter = errorStackTrace != null ?
                new ObjectParameter("ErrorStackTrace", errorStackTrace) :
                new ObjectParameter("ErrorStackTrace", typeof(string));
    
            var errorLogDateParameter = errorLogDate.HasValue ?
                new ObjectParameter("ErrorLogDate", errorLogDate) :
                new ObjectParameter("ErrorLogDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveErrorLog", accountIDParameter, platformIDParameter, loginIDParameter, reckonFileIDParameter, qboConnectIDParameter, controllerParameter, methodParameter, errorMessageParameter, errorStackTraceParameter, errorLogDateParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveFileSql(Nullable<int> accountID, string sqlServerName, string sqlDataBaseName, Nullable<bool> sqlAuthenticationMode, string sqlUserName, string sqlPassword, Nullable<System.DateTime> addedDte, Nullable<System.DateTime> updatedDte, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var sqlServerNameParameter = sqlServerName != null ?
                new ObjectParameter("SqlServerName", sqlServerName) :
                new ObjectParameter("SqlServerName", typeof(string));
    
            var sqlDataBaseNameParameter = sqlDataBaseName != null ?
                new ObjectParameter("SqlDataBaseName", sqlDataBaseName) :
                new ObjectParameter("SqlDataBaseName", typeof(string));
    
            var sqlAuthenticationModeParameter = sqlAuthenticationMode.HasValue ?
                new ObjectParameter("SqlAuthenticationMode", sqlAuthenticationMode) :
                new ObjectParameter("SqlAuthenticationMode", typeof(bool));
    
            var sqlUserNameParameter = sqlUserName != null ?
                new ObjectParameter("SqlUserName", sqlUserName) :
                new ObjectParameter("SqlUserName", typeof(string));
    
            var sqlPasswordParameter = sqlPassword != null ?
                new ObjectParameter("SqlPassword", sqlPassword) :
                new ObjectParameter("SqlPassword", typeof(string));
    
            var addedDteParameter = addedDte.HasValue ?
                new ObjectParameter("AddedDte", addedDte) :
                new ObjectParameter("AddedDte", typeof(System.DateTime));
    
            var updatedDteParameter = updatedDte.HasValue ?
                new ObjectParameter("UpdatedDte", updatedDte) :
                new ObjectParameter("UpdatedDte", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveFileSql", accountIDParameter, sqlServerNameParameter, sqlDataBaseNameParameter, sqlAuthenticationModeParameter, sqlUserNameParameter, sqlPasswordParameter, addedDteParameter, updatedDteParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveLogin(Nullable<int> accountID, Nullable<int> platformID, string userName, string emailAddress, string password, Nullable<int> loginID, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identityValue)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveLogin", accountIDParameter, platformIDParameter, userNameParameter, emailAddressParameter, passwordParameter, loginIDParameter, errNum, errDesc, identityValue);
        }
    
        public virtual int uspSavePFX(byte[] data, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSavePFX", dataParameter, errNum, errDesc);
        }
    
        public virtual int uspSavePlatform(string platformCode, string platformName, string description, Nullable<bool> active, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var platformCodeParameter = platformCode != null ?
                new ObjectParameter("PlatformCode", platformCode) :
                new ObjectParameter("PlatformCode", typeof(string));
    
            var platformNameParameter = platformName != null ?
                new ObjectParameter("PlatformName", platformName) :
                new ObjectParameter("PlatformName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSavePlatform", platformCodeParameter, platformNameParameter, descriptionParameter, activeParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveQboChartOfAccount(Nullable<int> accountID, Nullable<int> qboConnectID, string qboAccountID, string fullyQualifiedNameField, string accountSubTypeField, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            var fullyQualifiedNameFieldParameter = fullyQualifiedNameField != null ?
                new ObjectParameter("FullyQualifiedNameField", fullyQualifiedNameField) :
                new ObjectParameter("FullyQualifiedNameField", typeof(string));
    
            var accountSubTypeFieldParameter = accountSubTypeField != null ?
                new ObjectParameter("AccountSubTypeField", accountSubTypeField) :
                new ObjectParameter("AccountSubTypeField", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveQboChartOfAccount", accountIDParameter, qboConnectIDParameter, qboAccountIDParameter, fullyQualifiedNameFieldParameter, accountSubTypeFieldParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveQBOEzzyAccount(Nullable<int> qBOEzzyID, Nullable<int> accountID, Nullable<int> qboConnectID, string ezzyUserName, string ezzyPassword, string ezzyEmailAddress, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var qBOEzzyIDParameter = qBOEzzyID.HasValue ?
                new ObjectParameter("QBOEzzyID", qBOEzzyID) :
                new ObjectParameter("QBOEzzyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var ezzyUserNameParameter = ezzyUserName != null ?
                new ObjectParameter("EzzyUserName", ezzyUserName) :
                new ObjectParameter("EzzyUserName", typeof(string));
    
            var ezzyPasswordParameter = ezzyPassword != null ?
                new ObjectParameter("EzzyPassword", ezzyPassword) :
                new ObjectParameter("EzzyPassword", typeof(string));
    
            var ezzyEmailAddressParameter = ezzyEmailAddress != null ?
                new ObjectParameter("EzzyEmailAddress", ezzyEmailAddress) :
                new ObjectParameter("EzzyEmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveQBOEzzyAccount", qBOEzzyIDParameter, accountIDParameter, qboConnectIDParameter, ezzyUserNameParameter, ezzyPasswordParameter, ezzyEmailAddressParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveQBOMaster(Nullable<int> accountID, string accessToken, Nullable<System.DateTime> accessTokenExpiresIn, string realmId, string refreshToken, Nullable<System.DateTime> refreshTokenExpiresIn, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            var accessTokenExpiresInParameter = accessTokenExpiresIn.HasValue ?
                new ObjectParameter("AccessTokenExpiresIn", accessTokenExpiresIn) :
                new ObjectParameter("AccessTokenExpiresIn", typeof(System.DateTime));
    
            var realmIdParameter = realmId != null ?
                new ObjectParameter("RealmId", realmId) :
                new ObjectParameter("RealmId", typeof(string));
    
            var refreshTokenParameter = refreshToken != null ?
                new ObjectParameter("RefreshToken", refreshToken) :
                new ObjectParameter("RefreshToken", typeof(string));
    
            var refreshTokenExpiresInParameter = refreshTokenExpiresIn.HasValue ?
                new ObjectParameter("RefreshTokenExpiresIn", refreshTokenExpiresIn) :
                new ObjectParameter("RefreshTokenExpiresIn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveQBOMaster", accountIDParameter, accessTokenParameter, accessTokenExpiresInParameter, realmIdParameter, refreshTokenParameter, refreshTokenExpiresInParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspSaveQboTax(Nullable<int> accountID, Nullable<int> qboConnectID, string taxID, string taxName, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var taxNameParameter = taxName != null ?
                new ObjectParameter("TaxName", taxName) :
                new ObjectParameter("TaxName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveQboTax", accountIDParameter, qboConnectIDParameter, taxIDParameter, taxNameParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveQboVendor(Nullable<int> accountID, Nullable<int> qboConnectID, string qboVendorID, string displayNameField, string cityField, string countrySubDivisionCodeField, string postalCodeField, string countryField, string primaryPhone, string primaryEmailAddr, string taxIdentifier, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var displayNameFieldParameter = displayNameField != null ?
                new ObjectParameter("DisplayNameField", displayNameField) :
                new ObjectParameter("DisplayNameField", typeof(string));
    
            var cityFieldParameter = cityField != null ?
                new ObjectParameter("CityField", cityField) :
                new ObjectParameter("CityField", typeof(string));
    
            var countrySubDivisionCodeFieldParameter = countrySubDivisionCodeField != null ?
                new ObjectParameter("CountrySubDivisionCodeField", countrySubDivisionCodeField) :
                new ObjectParameter("CountrySubDivisionCodeField", typeof(string));
    
            var postalCodeFieldParameter = postalCodeField != null ?
                new ObjectParameter("PostalCodeField", postalCodeField) :
                new ObjectParameter("PostalCodeField", typeof(string));
    
            var countryFieldParameter = countryField != null ?
                new ObjectParameter("CountryField", countryField) :
                new ObjectParameter("CountryField", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var primaryEmailAddrParameter = primaryEmailAddr != null ?
                new ObjectParameter("PrimaryEmailAddr", primaryEmailAddr) :
                new ObjectParameter("PrimaryEmailAddr", typeof(string));
    
            var taxIdentifierParameter = taxIdentifier != null ?
                new ObjectParameter("TaxIdentifier", taxIdentifier) :
                new ObjectParameter("TaxIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveQboVendor", accountIDParameter, qboConnectIDParameter, qboVendorIDParameter, displayNameFieldParameter, cityFieldParameter, countrySubDivisionCodeFieldParameter, postalCodeFieldParameter, countryFieldParameter, primaryPhoneParameter, primaryEmailAddrParameter, taxIdentifierParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveReckonDesktop(Nullable<int> reckonFileID, Nullable<int> accountID, string companyName, string legalCompanyName, Nullable<bool> isSampleCompany, string phone, string email, string addr1, string addr2, string addr3, string city, string state, string postalCode, string country, string filePath, Nullable<bool> isUsingJobCosting, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var legalCompanyNameParameter = legalCompanyName != null ?
                new ObjectParameter("LegalCompanyName", legalCompanyName) :
                new ObjectParameter("LegalCompanyName", typeof(string));
    
            var isSampleCompanyParameter = isSampleCompany.HasValue ?
                new ObjectParameter("IsSampleCompany", isSampleCompany) :
                new ObjectParameter("IsSampleCompany", typeof(bool));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var addr2Parameter = addr2 != null ?
                new ObjectParameter("Addr2", addr2) :
                new ObjectParameter("Addr2", typeof(string));
    
            var addr3Parameter = addr3 != null ?
                new ObjectParameter("Addr3", addr3) :
                new ObjectParameter("Addr3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var isUsingJobCostingParameter = isUsingJobCosting.HasValue ?
                new ObjectParameter("IsUsingJobCosting", isUsingJobCosting) :
                new ObjectParameter("IsUsingJobCosting", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveReckonDesktop", reckonFileIDParameter, accountIDParameter, companyNameParameter, legalCompanyNameParameter, isSampleCompanyParameter, phoneParameter, emailParameter, addr1Parameter, addr2Parameter, addr3Parameter, cityParameter, stateParameter, postalCodeParameter, countryParameter, filePathParameter, isUsingJobCostingParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspSaveReckonDocument(Nullable<int> reckonDocumentID, Nullable<int> accountID, Nullable<int> reckonFileID, Nullable<int> scanInvoiceID, string txnID, string scanPdfPath, string invoiceNumber, string invoiceType, Nullable<System.DateTime> invoiceDate, string vendorName, Nullable<decimal> invoiceTotal, Nullable<decimal> taxTotal, Nullable<System.DateTime> uploadedDate, string reckonError, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var reckonDocumentIDParameter = reckonDocumentID.HasValue ?
                new ObjectParameter("ReckonDocumentID", reckonDocumentID) :
                new ObjectParameter("ReckonDocumentID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            var scanInvoiceIDParameter = scanInvoiceID.HasValue ?
                new ObjectParameter("ScanInvoiceID", scanInvoiceID) :
                new ObjectParameter("ScanInvoiceID", typeof(int));
    
            var txnIDParameter = txnID != null ?
                new ObjectParameter("TxnID", txnID) :
                new ObjectParameter("TxnID", typeof(string));
    
            var scanPdfPathParameter = scanPdfPath != null ?
                new ObjectParameter("ScanPdfPath", scanPdfPath) :
                new ObjectParameter("ScanPdfPath", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceTypeParameter = invoiceType != null ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var invoiceTotalParameter = invoiceTotal.HasValue ?
                new ObjectParameter("InvoiceTotal", invoiceTotal) :
                new ObjectParameter("InvoiceTotal", typeof(decimal));
    
            var taxTotalParameter = taxTotal.HasValue ?
                new ObjectParameter("TaxTotal", taxTotal) :
                new ObjectParameter("TaxTotal", typeof(decimal));
    
            var uploadedDateParameter = uploadedDate.HasValue ?
                new ObjectParameter("UploadedDate", uploadedDate) :
                new ObjectParameter("UploadedDate", typeof(System.DateTime));
    
            var reckonErrorParameter = reckonError != null ?
                new ObjectParameter("ReckonError", reckonError) :
                new ObjectParameter("ReckonError", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveReckonDocument", reckonDocumentIDParameter, accountIDParameter, reckonFileIDParameter, scanInvoiceIDParameter, txnIDParameter, scanPdfPathParameter, invoiceNumberParameter, invoiceTypeParameter, invoiceDateParameter, vendorNameParameter, invoiceTotalParameter, taxTotalParameter, uploadedDateParameter, reckonErrorParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspSaveReckonEzzyAccount(Nullable<int> rCEzzyID, Nullable<int> accountID, Nullable<int> reckonFileID, string ezzyEmailAddress, string ezzyUserName, string ezzyPassword, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var rCEzzyIDParameter = rCEzzyID.HasValue ?
                new ObjectParameter("RCEzzyID", rCEzzyID) :
                new ObjectParameter("RCEzzyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            var ezzyEmailAddressParameter = ezzyEmailAddress != null ?
                new ObjectParameter("EzzyEmailAddress", ezzyEmailAddress) :
                new ObjectParameter("EzzyEmailAddress", typeof(string));
    
            var ezzyUserNameParameter = ezzyUserName != null ?
                new ObjectParameter("EzzyUserName", ezzyUserName) :
                new ObjectParameter("EzzyUserName", typeof(string));
    
            var ezzyPasswordParameter = ezzyPassword != null ?
                new ObjectParameter("EzzyPassword", ezzyPassword) :
                new ObjectParameter("EzzyPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveReckonEzzyAccount", rCEzzyIDParameter, accountIDParameter, reckonFileIDParameter, ezzyEmailAddressParameter, ezzyUserNameParameter, ezzyPasswordParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveReckonVendorDefault(Nullable<int> iD, Nullable<int> accountID, Nullable<int> reckonFileID, string vendorListID, string defaultExpense, string defaultItem, string defaultExpenseListID, string defaultItemListID, Nullable<int> addedBy, Nullable<System.DateTime> addedDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            var vendorListIDParameter = vendorListID != null ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(string));
    
            var defaultExpenseParameter = defaultExpense != null ?
                new ObjectParameter("DefaultExpense", defaultExpense) :
                new ObjectParameter("DefaultExpense", typeof(string));
    
            var defaultItemParameter = defaultItem != null ?
                new ObjectParameter("DefaultItem", defaultItem) :
                new ObjectParameter("DefaultItem", typeof(string));
    
            var defaultExpenseListIDParameter = defaultExpenseListID != null ?
                new ObjectParameter("DefaultExpenseListID", defaultExpenseListID) :
                new ObjectParameter("DefaultExpenseListID", typeof(string));
    
            var defaultItemListIDParameter = defaultItemListID != null ?
                new ObjectParameter("DefaultItemListID", defaultItemListID) :
                new ObjectParameter("DefaultItemListID", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveReckonVendorDefault", iDParameter, accountIDParameter, reckonFileIDParameter, vendorListIDParameter, defaultExpenseParameter, defaultItemParameter, defaultExpenseListIDParameter, defaultItemListIDParameter, addedByParameter, addedDateParameter, updatedByParameter, updatedDateParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveRefreshedXeroToken(Nullable<int> accountID, Nullable<int> xeroConnectID, string oAuthToken, string oAuthTokenSec, string accessToken, Nullable<System.DateTime> accessTokenExpiresIn, string refreshToken, Nullable<System.DateTime> refreshTokenExpiresIn, string sessionHandle, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var xeroConnectIDParameter = xeroConnectID.HasValue ?
                new ObjectParameter("XeroConnectID", xeroConnectID) :
                new ObjectParameter("XeroConnectID", typeof(int));
    
            var oAuthTokenParameter = oAuthToken != null ?
                new ObjectParameter("OAuthToken", oAuthToken) :
                new ObjectParameter("OAuthToken", typeof(string));
    
            var oAuthTokenSecParameter = oAuthTokenSec != null ?
                new ObjectParameter("OAuthTokenSec", oAuthTokenSec) :
                new ObjectParameter("OAuthTokenSec", typeof(string));
    
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            var accessTokenExpiresInParameter = accessTokenExpiresIn.HasValue ?
                new ObjectParameter("AccessTokenExpiresIn", accessTokenExpiresIn) :
                new ObjectParameter("AccessTokenExpiresIn", typeof(System.DateTime));
    
            var refreshTokenParameter = refreshToken != null ?
                new ObjectParameter("RefreshToken", refreshToken) :
                new ObjectParameter("RefreshToken", typeof(string));
    
            var refreshTokenExpiresInParameter = refreshTokenExpiresIn.HasValue ?
                new ObjectParameter("RefreshTokenExpiresIn", refreshTokenExpiresIn) :
                new ObjectParameter("RefreshTokenExpiresIn", typeof(System.DateTime));
    
            var sessionHandleParameter = sessionHandle != null ?
                new ObjectParameter("SessionHandle", sessionHandle) :
                new ObjectParameter("SessionHandle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveRefreshedXeroToken", accountIDParameter, xeroConnectIDParameter, oAuthTokenParameter, oAuthTokenSecParameter, accessTokenParameter, accessTokenExpiresInParameter, refreshTokenParameter, refreshTokenExpiresInParameter, sessionHandleParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveStripePayment(Nullable<int> accountID, Nullable<int> planID, Nullable<decimal> amount, string stripeBalanceTxnID, string stripeID, Nullable<bool> stripeIsPaid, string stripeStatus, Nullable<System.DateTime> stripeDateTime, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var stripeBalanceTxnIDParameter = stripeBalanceTxnID != null ?
                new ObjectParameter("StripeBalanceTxnID", stripeBalanceTxnID) :
                new ObjectParameter("StripeBalanceTxnID", typeof(string));
    
            var stripeIDParameter = stripeID != null ?
                new ObjectParameter("StripeID", stripeID) :
                new ObjectParameter("StripeID", typeof(string));
    
            var stripeIsPaidParameter = stripeIsPaid.HasValue ?
                new ObjectParameter("StripeIsPaid", stripeIsPaid) :
                new ObjectParameter("StripeIsPaid", typeof(bool));
    
            var stripeStatusParameter = stripeStatus != null ?
                new ObjectParameter("StripeStatus", stripeStatus) :
                new ObjectParameter("StripeStatus", typeof(string));
    
            var stripeDateTimeParameter = stripeDateTime.HasValue ?
                new ObjectParameter("StripeDateTime", stripeDateTime) :
                new ObjectParameter("StripeDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveStripePayment", accountIDParameter, planIDParameter, amountParameter, stripeBalanceTxnIDParameter, stripeIDParameter, stripeIsPaidParameter, stripeStatusParameter, stripeDateTimeParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspSaveXeroChartOfAccount(Nullable<int> accountID, Nullable<int> qboConnectID, string qboAccountID, string fullyQualifiedNameField, string accountSubTypeField, string accountCode, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            var fullyQualifiedNameFieldParameter = fullyQualifiedNameField != null ?
                new ObjectParameter("FullyQualifiedNameField", fullyQualifiedNameField) :
                new ObjectParameter("FullyQualifiedNameField", typeof(string));
    
            var accountSubTypeFieldParameter = accountSubTypeField != null ?
                new ObjectParameter("AccountSubTypeField", accountSubTypeField) :
                new ObjectParameter("AccountSubTypeField", typeof(string));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveXeroChartOfAccount", accountIDParameter, qboConnectIDParameter, qboAccountIDParameter, fullyQualifiedNameFieldParameter, accountSubTypeFieldParameter, accountCodeParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveXeroEzzyAccount(Nullable<int> xeroEzzyID, Nullable<int> accountID, Nullable<int> xeroConnectID, string ezzyUserName, string ezzyPassword, string ezzyEmailAddress, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var xeroEzzyIDParameter = xeroEzzyID.HasValue ?
                new ObjectParameter("XeroEzzyID", xeroEzzyID) :
                new ObjectParameter("XeroEzzyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var xeroConnectIDParameter = xeroConnectID.HasValue ?
                new ObjectParameter("XeroConnectID", xeroConnectID) :
                new ObjectParameter("XeroConnectID", typeof(int));
    
            var ezzyUserNameParameter = ezzyUserName != null ?
                new ObjectParameter("EzzyUserName", ezzyUserName) :
                new ObjectParameter("EzzyUserName", typeof(string));
    
            var ezzyPasswordParameter = ezzyPassword != null ?
                new ObjectParameter("EzzyPassword", ezzyPassword) :
                new ObjectParameter("EzzyPassword", typeof(string));
    
            var ezzyEmailAddressParameter = ezzyEmailAddress != null ?
                new ObjectParameter("EzzyEmailAddress", ezzyEmailAddress) :
                new ObjectParameter("EzzyEmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveXeroEzzyAccount", xeroEzzyIDParameter, accountIDParameter, xeroConnectIDParameter, ezzyUserNameParameter, ezzyPasswordParameter, ezzyEmailAddressParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveXeroMaster(Nullable<int> accountID, string oAuthToken, string oAuthTokenSec, string accessToken, Nullable<System.DateTime> accessTokenExpiresIn, string realmId, string refreshToken, Nullable<System.DateTime> refreshTokenExpiresIn, string sessionHandle, ObjectParameter errNum, ObjectParameter errDesc, ObjectParameter identity)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var oAuthTokenParameter = oAuthToken != null ?
                new ObjectParameter("OAuthToken", oAuthToken) :
                new ObjectParameter("OAuthToken", typeof(string));
    
            var oAuthTokenSecParameter = oAuthTokenSec != null ?
                new ObjectParameter("OAuthTokenSec", oAuthTokenSec) :
                new ObjectParameter("OAuthTokenSec", typeof(string));
    
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            var accessTokenExpiresInParameter = accessTokenExpiresIn.HasValue ?
                new ObjectParameter("AccessTokenExpiresIn", accessTokenExpiresIn) :
                new ObjectParameter("AccessTokenExpiresIn", typeof(System.DateTime));
    
            var realmIdParameter = realmId != null ?
                new ObjectParameter("RealmId", realmId) :
                new ObjectParameter("RealmId", typeof(string));
    
            var refreshTokenParameter = refreshToken != null ?
                new ObjectParameter("RefreshToken", refreshToken) :
                new ObjectParameter("RefreshToken", typeof(string));
    
            var refreshTokenExpiresInParameter = refreshTokenExpiresIn.HasValue ?
                new ObjectParameter("RefreshTokenExpiresIn", refreshTokenExpiresIn) :
                new ObjectParameter("RefreshTokenExpiresIn", typeof(System.DateTime));
    
            var sessionHandleParameter = sessionHandle != null ?
                new ObjectParameter("SessionHandle", sessionHandle) :
                new ObjectParameter("SessionHandle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveXeroMaster", accountIDParameter, oAuthTokenParameter, oAuthTokenSecParameter, accessTokenParameter, accessTokenExpiresInParameter, realmIdParameter, refreshTokenParameter, refreshTokenExpiresInParameter, sessionHandleParameter, errNum, errDesc, identity);
        }
    
        public virtual int uspSaveXeroTax(Nullable<int> accountID, Nullable<int> qboConnectID, string taxID, string taxName, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var taxNameParameter = taxName != null ?
                new ObjectParameter("TaxName", taxName) :
                new ObjectParameter("TaxName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveXeroTax", accountIDParameter, qboConnectIDParameter, taxIDParameter, taxNameParameter, errNum, errDesc);
        }
    
        public virtual int uspSaveXeroVendor(Nullable<int> accountID, Nullable<int> qboConnectID, string qboVendorID, string displayNameField, string cityField, string countrySubDivisionCodeField, string postalCodeField, string countryField, string primaryPhone, string primaryEmailAddr, string taxIdentifier, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var displayNameFieldParameter = displayNameField != null ?
                new ObjectParameter("DisplayNameField", displayNameField) :
                new ObjectParameter("DisplayNameField", typeof(string));
    
            var cityFieldParameter = cityField != null ?
                new ObjectParameter("CityField", cityField) :
                new ObjectParameter("CityField", typeof(string));
    
            var countrySubDivisionCodeFieldParameter = countrySubDivisionCodeField != null ?
                new ObjectParameter("CountrySubDivisionCodeField", countrySubDivisionCodeField) :
                new ObjectParameter("CountrySubDivisionCodeField", typeof(string));
    
            var postalCodeFieldParameter = postalCodeField != null ?
                new ObjectParameter("PostalCodeField", postalCodeField) :
                new ObjectParameter("PostalCodeField", typeof(string));
    
            var countryFieldParameter = countryField != null ?
                new ObjectParameter("CountryField", countryField) :
                new ObjectParameter("CountryField", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var primaryEmailAddrParameter = primaryEmailAddr != null ?
                new ObjectParameter("PrimaryEmailAddr", primaryEmailAddr) :
                new ObjectParameter("PrimaryEmailAddr", typeof(string));
    
            var taxIdentifierParameter = taxIdentifier != null ?
                new ObjectParameter("TaxIdentifier", taxIdentifier) :
                new ObjectParameter("TaxIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveXeroVendor", accountIDParameter, qboConnectIDParameter, qboVendorIDParameter, displayNameFieldParameter, cityFieldParameter, countrySubDivisionCodeFieldParameter, postalCodeFieldParameter, countryFieldParameter, primaryPhoneParameter, primaryEmailAddrParameter, taxIdentifierParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateIsEzUploadRequired(Nullable<int> loginID, Nullable<bool> isEzUploadRequired, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var isEzUploadRequiredParameter = isEzUploadRequired.HasValue ?
                new ObjectParameter("IsEzUploadRequired", isEzUploadRequired) :
                new ObjectParameter("IsEzUploadRequired", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateIsEzUploadRequired", loginIDParameter, isEzUploadRequiredParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateLogin(string activationCode, Nullable<int> loginID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var activationCodeParameter = activationCode != null ?
                new ObjectParameter("ActivationCode", activationCode) :
                new ObjectParameter("ActivationCode", typeof(string));
    
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateLogin", activationCodeParameter, loginIDParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdatePhoneByAccountID(Nullable<int> accountID, string phone, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePhoneByAccountID", accountIDParameter, phoneParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateQboBillID(Nullable<int> documentID, string qboInvoiceID, string error, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var qboInvoiceIDParameter = qboInvoiceID != null ?
                new ObjectParameter("QboInvoiceID", qboInvoiceID) :
                new ObjectParameter("QboInvoiceID", typeof(string));
    
            var errorParameter = error != null ?
                new ObjectParameter("Error", error) :
                new ObjectParameter("Error", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateQboBillID", documentIDParameter, qboInvoiceIDParameter, errorParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateQBOCompanyInfo(Nullable<int> accountID, string realmId, string companyName, string leagalName, string email, string primaryPhone, string webAddr, string country, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var realmIdParameter = realmId != null ?
                new ObjectParameter("RealmId", realmId) :
                new ObjectParameter("RealmId", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var leagalNameParameter = leagalName != null ?
                new ObjectParameter("LeagalName", leagalName) :
                new ObjectParameter("LeagalName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var webAddrParameter = webAddr != null ?
                new ObjectParameter("WebAddr", webAddr) :
                new ObjectParameter("WebAddr", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateQBOCompanyInfo", accountIDParameter, realmIdParameter, companyNameParameter, leagalNameParameter, emailParameter, primaryPhoneParameter, webAddrParameter, countryParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateQboDocument(Nullable<int> documentID, string qboVendorID, string qboVendorName, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var qboVendorNameParameter = qboVendorName != null ?
                new ObjectParameter("QboVendorName", qboVendorName) :
                new ObjectParameter("QboVendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateQboDocument", documentIDParameter, qboVendorIDParameter, qboVendorNameParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateQboDocumentLine(Nullable<int> documentID, Nullable<int> documentLineID, string qboAccountID, string qboAccountName, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentLineIDParameter = documentLineID.HasValue ?
                new ObjectParameter("DocumentLineID", documentLineID) :
                new ObjectParameter("DocumentLineID", typeof(int));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            var qboAccountNameParameter = qboAccountName != null ?
                new ObjectParameter("QboAccountName", qboAccountName) :
                new ObjectParameter("QboAccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateQboDocumentLine", documentIDParameter, documentLineIDParameter, qboAccountIDParameter, qboAccountNameParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateQboVendAcct(Nullable<int> accountID, Nullable<int> qboConnectID, string qboVendorID, string qboAccountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateQboVendAcct", accountIDParameter, qboConnectIDParameter, qboVendorIDParameter, qboAccountIDParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateReAuthrorizeByAccountID(Nullable<int> accountID, Nullable<bool> isAuthrorize, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var isAuthrorizeParameter = isAuthrorize.HasValue ?
                new ObjectParameter("IsAuthrorize", isAuthrorize) :
                new ObjectParameter("IsAuthrorize", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateReAuthrorizeByAccountID", accountIDParameter, isAuthrorizeParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateReckonFileUserAccess(Nullable<int> userID, Nullable<int> reckonFileID, Nullable<bool> isAccess, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var reckonFileIDParameter = reckonFileID.HasValue ?
                new ObjectParameter("ReckonFileID", reckonFileID) :
                new ObjectParameter("ReckonFileID", typeof(int));
    
            var isAccessParameter = isAccess.HasValue ?
                new ObjectParameter("IsAccess", isAccess) :
                new ObjectParameter("IsAccess", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateReckonFileUserAccess", userIDParameter, reckonFileIDParameter, isAccessParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateToken(Nullable<int> loginID, string token, Nullable<System.DateTime> tokenExpiredDate, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var tokenExpiredDateParameter = tokenExpiredDate.HasValue ?
                new ObjectParameter("TokenExpiredDate", tokenExpiredDate) :
                new ObjectParameter("TokenExpiredDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateToken", loginIDParameter, tokenParameter, tokenExpiredDateParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateXeroBillID(Nullable<int> documentID, string qboInvoiceID, Nullable<int> status, string error, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var qboInvoiceIDParameter = qboInvoiceID != null ?
                new ObjectParameter("QboInvoiceID", qboInvoiceID) :
                new ObjectParameter("QboInvoiceID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var errorParameter = error != null ?
                new ObjectParameter("Error", error) :
                new ObjectParameter("Error", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateXeroBillID", documentIDParameter, qboInvoiceIDParameter, statusParameter, errorParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateXeroCompanyInfo(Nullable<int> accountID, string realmId, string companyName, string leagalName, string email, string primaryPhone, string webAddr, string country, string shortCode, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var realmIdParameter = realmId != null ?
                new ObjectParameter("RealmId", realmId) :
                new ObjectParameter("RealmId", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var leagalNameParameter = leagalName != null ?
                new ObjectParameter("LeagalName", leagalName) :
                new ObjectParameter("LeagalName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var webAddrParameter = webAddr != null ?
                new ObjectParameter("WebAddr", webAddr) :
                new ObjectParameter("WebAddr", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateXeroCompanyInfo", accountIDParameter, realmIdParameter, companyNameParameter, leagalNameParameter, emailParameter, primaryPhoneParameter, webAddrParameter, countryParameter, shortCodeParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateXeroDocument(Nullable<int> documentID, string qboVendorID, string qboVendorName, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var qboVendorNameParameter = qboVendorName != null ?
                new ObjectParameter("QboVendorName", qboVendorName) :
                new ObjectParameter("QboVendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateXeroDocument", documentIDParameter, qboVendorIDParameter, qboVendorNameParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateXeroDocumentLine(Nullable<int> documentID, Nullable<int> documentLineID, string qboAccountID, string qboAccountName, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentLineIDParameter = documentLineID.HasValue ?
                new ObjectParameter("DocumentLineID", documentLineID) :
                new ObjectParameter("DocumentLineID", typeof(int));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            var qboAccountNameParameter = qboAccountName != null ?
                new ObjectParameter("QboAccountName", qboAccountName) :
                new ObjectParameter("QboAccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateXeroDocumentLine", documentIDParameter, documentLineIDParameter, qboAccountIDParameter, qboAccountNameParameter, errNum, errDesc);
        }
    
        public virtual int uspUpdateXeroVendAcct(Nullable<int> accountID, Nullable<int> qboConnectID, string qboVendorID, string qboAccountID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var qboConnectIDParameter = qboConnectID.HasValue ?
                new ObjectParameter("QboConnectID", qboConnectID) :
                new ObjectParameter("QboConnectID", typeof(int));
    
            var qboVendorIDParameter = qboVendorID != null ?
                new ObjectParameter("QboVendorID", qboVendorID) :
                new ObjectParameter("QboVendorID", typeof(string));
    
            var qboAccountIDParameter = qboAccountID != null ?
                new ObjectParameter("QboAccountID", qboAccountID) :
                new ObjectParameter("QboAccountID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateXeroVendAcct", accountIDParameter, qboConnectIDParameter, qboVendorIDParameter, qboAccountIDParameter, errNum, errDesc);
        }
    
        public virtual int uspUpgradePlan(Nullable<int> accountID, Nullable<int> planID, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("PlanID", planID) :
                new ObjectParameter("PlanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpgradePlan", accountIDParameter, planIDParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspValidateActivationCode_Result> uspValidateActivationCode(string userName, Nullable<int> platformID, string code, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspValidateActivationCode_Result>("uspValidateActivationCode", userNameParameter, platformIDParameter, codeParameter, errNum, errDesc);
        }
    
        public virtual ObjectResult<uspVerifyUsernameandPassword_Result> uspVerifyUsernameandPassword(string userName, string password, ObjectParameter errNum, ObjectParameter errDesc)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVerifyUsernameandPassword_Result>("uspVerifyUsernameandPassword", userNameParameter, passwordParameter, errNum, errDesc);
        }
    }
}
